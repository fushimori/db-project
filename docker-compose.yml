services:
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=${DATABASE_URL}  # Подключение к базе данных
      - SECRET_KEY=${SECRET_KEY}       # Использование секретного ключа из .env
      - ALGORITHM=${ALGORITHM}         # Алгоритм для JWT
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES}  # Время жизни токена
      - PYTHONPATH=/app
    depends_on:
      - db
    networks:
      - app_network
    volumes:
      - ./backend:/app
      - ./static:/app/static

  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - app_network
    volumes:
      - ./frontend/my-app:/app

  db:
    build:
      context: .
      dockerfile: db/Dockerfile  # Добавляем сборку контейнера db
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}     # Используем переменную из .env
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}  # Используем переменную из .env
      POSTGRES_DB: ${POSTGRES_DB}         # Используем переменную из .env
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./db/migrations:/docker-entrypoint-initdb.d/migrations
      - ./db/run_migrations.sh:/docker-entrypoint-initdb.d/run_migrations.sh
    networks:
      - app_network

networks:
  app_network:
    driver: bridge

volumes:
  db_data: # том для сохранения данных PostgreSQL между перезапусками контейнера
